#!/usr/bin/env python3

import subprocess
import os
from typing import no_type_check_decorator

good_dir = "./known_good_test_files"
bad_dir = "./known_bad_test_files"
math_dir = "./math_test_files"

good_files = os.listdir(good_dir)
bad_files = os.listdir(bad_dir)
math_files = os.listdir(math_dir)

# Checks that all invalid uC programs fail to compile


def check_bad_files_fail():
    for file_name in good_files:
        result = subprocess.run(
            ["./compiler", "-f", good_dir + "/" + file_name], capture_output=True)
        if (result.returncode != 0):
            print("Error: Expected " + file_name +
                  " to pass tests but it failed\n")
            return False

# Checks that all valid uC programs compile


def check_good_files_pass():
    for file_name in bad_files:
        result = subprocess.run(
            ["./compiler", "-f", bad_dir + "/" + file_name])
        if (result.returncode == 0):
            print("Error: Expected " + file_name +
                  " to fail tests but it passed\n")
            return False


# compares the output of the executables generated by gcc and the custom compiler
# returns false if the return values of the two programs don't match
def check_math_files():

    last_gcc_result = 0
    last_custom_cc_result = 0
    last_gcc_file_name = ""
    last_custom_cc_file_name = ""
    checked_custom_cc = False
    checked_gcc = False

    print("Checking output of math files\n")

    for file_name in math_files:

        if (checked_custom_cc and checked_gcc):
            if (last_gcc_result != last_custom_cc_result):
                print("Error, " + last_custom_cc_file_name + " returned "
                      + str(last_custom_cc_result) + " and gcc returned " + str(last_gcc_result))
                return False
            else:
                checked_gcc = False
                checked_custom_cc = False

        if (str(file_name).find("_gcc") != -1):
            print("testing " + file_name)
            gcc_result = subprocess.run([math_dir + "/" + file_name])
            last_gcc_result = gcc_result.returncode
            last_gcc_file_name = file_name
            checked_gcc = True
            continue

        elif (str(file_name).find("_custom_cc") != -1):
            print("testing " + file_name)
            custom_cc_result = subprocess.run([math_dir + "/" + file_name])
            last_custom_cc_result = custom_cc_result.returncode
            last_custom_cc_file_name = file_name
            checked_custom_cc = True
            continue

    return True


# Runs the testing functions
if __name__ == "__main__":
    print("Generating files\n")
    subprocess.run(["python3", "gen_math_files.py"])
    print("Compiling files under gcc and custom_cc\n")
    subprocess.run(["make", "-C", "./math_test_files"])
    if (check_math_files()):
        print("Success, output for gcc and custom cc match")
    else:
        exit(1)
