#!/usr/bin/env python3
import subprocess
import os
from typing import no_type_check_decorator

good_dir = "./known_good_test_files"
bad_dir = "./known_bad_test_files"
math_dir = "./math_test_files"

bad_files = os.listdir(bad_dir)

# Checks that all invalid uC programs fail to compile
def check_bad_files_fail():
    for file_name in bad_files:
        result = subprocess.run(
            ["./compiler", "-f", good_dir + "/" + file_name], capture_output=True)
        if (result.returncode != 0):
            print("Error: Expected " + file_name +
                  " to pass tests but it failed\n")
            return False


# compares the output of the executables generated by gcc and the custom compiler
# returns false if the return values of the two programs don't match
def check_files(search_dir):

    last_gcc_result = 0
    last_custom_cc_result = 0
    last_gcc_file_name = ""
    last_custom_cc_file_name = ""
    checked_custom_cc = False
    checked_gcc = False

    for file_name in os.listdir(search_dir):

        if (checked_custom_cc and checked_gcc):
            if (last_gcc_result != last_custom_cc_result):
                print("Error, " + last_custom_cc_file_name + " returned "
                      + str(last_custom_cc_result) + " and gcc returned " + str(last_gcc_result))
                return False
            else:
                checked_gcc = False
                checked_custom_cc = False

        if (str(file_name).find("_gcc") != -1):
            print("testing " + file_name)
            gcc_result = subprocess.run([search_dir + "/" + file_name])
            last_gcc_result = gcc_result.returncode
            last_gcc_file_name = file_name
            checked_gcc = True
            continue

        elif (str(file_name).find("_custom_cc") != -1):
            print("testing " + file_name)
            custom_cc_result = subprocess.run([search_dir + "/" + file_name])
            last_custom_cc_result = custom_cc_result.returncode
            last_custom_cc_file_name = file_name
            checked_custom_cc = True
            continue

    return True

def test_random_files():
    print("Cleaning random file dir")
    subprocess.run(["make", "clean", "-C", "./math_test_files"])
    print("Generating random files\n")
    subprocess.run(["python3", "gen_math_files.py"])
    subprocess.run(["make", "-j5", "-C", "./math_test_files"])
    print("Checking that outputs match")
    ret_status = check_files(math_dir)
    subprocess.run(["make", "clean", "-C", "./math_test_files"])
    return ret_status

def test_custom_files():
    print("Cleaning custom file dir")
    subprocess.run(["make", "clean", "-C", "./known_good_test_files"])
    print("Compiling custom files\n")
    subprocess.run(["make", "-j5", "-C", "./known_good_test_files"])
    ret_status = check_files(good_dir)
    subprocess.run(["make", "clean", "-C", "./known_good_test_files"])
    return ret_status

# Runs the testing functions
if __name__ == "__main__":
    if (not test_custom_files()):
        print("Error with custom test file")
        exit(1)
    else:
        print("Success, custom tests passed")
    if (not test_random_files()):
        print("Error with random test file")
        exit(1)